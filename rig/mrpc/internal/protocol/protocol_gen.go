package protocol

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Fail) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Code, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	z.Msg, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Msg")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Fail) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Code)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	err = en.WriteString(z.Msg)
	if err != nil {
		err = msgp.WrapError(err, "Msg")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Fail) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Code)
	o = msgp.AppendString(o, z.Msg)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Fail) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Code, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	z.Msg, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Msg")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Fail) Msgsize() (s int) {
	s = 1 + msgp.IntSize + msgp.StringPrefixSize + len(z.Msg)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Request) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.ID, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	z.Method, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	z.Function, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Function")
		return
	}
	err = z.Input.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Input")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Request) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	err = en.WriteString(z.Method)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	err = en.WriteString(z.Function)
	if err != nil {
		err = msgp.WrapError(err, "Function")
		return
	}
	err = z.Input.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Input")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Request) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendString(o, z.ID)
	o = msgp.AppendString(o, z.Method)
	o = msgp.AppendString(o, z.Function)
	o, err = z.Input.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Input")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Request) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.ID, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	z.Method, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	z.Function, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Function")
		return
	}
	bts, err = z.Input.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Input")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Request) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.ID) + msgp.StringPrefixSize + len(z.Method) + msgp.StringPrefixSize + len(z.Function) + z.Input.Msgsize()
	return
}
